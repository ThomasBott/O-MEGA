#O-MEGA defaultConfig.py v1.11

def files():
    return [["dashboard", "hide", "-", "/systemTemplates/dashboard/dashboard.html", "", "", "default", 0, 0, 0, [""]], ["configuration", "-", "-", "/systemTemplates/settings/devframe.html", "", "", "configurationconfiguration", 0, 0, 0, [""]]]

def dictionary(thisPcName):
    return {"statesCfg.jsonshort": {"[22]": ["", ""], "[up]": ["UP", "OBEN"], "[off]": ["OFF", "AUS"], "[all]": ["", ""], "[18]": ["18", "18"], "[20]": ["20", "20"], "[?]": ["?", "?"], "[activate]": ["Activ", "Aktiv"], "[restart]": ["Re-<br>Start", "Neu-<br>Start"], "[13]": ["13", "13"], "[16]": ["16", "16"], "[on]": ["ON", "AN"], "[15]": ["15", "15"], "[17]": ["17", "17"], "[stop]": ["STOP", "STOP"], "[6]": ["", ""], "[error]": ["ERR", "ERR"], "[4]": ["", ""], "[2]": ["", ""], "[0]": ["", ""], "[open]": ["OPEN", "AUF"], "[down]": ["DOWN", "UNTN"], "[25]": ["", ""], "[standby]": ["Stand<br>By", "Stand<br>By"], "[21]": ["", ""], "[19]": ["19", "19"], "[24]": ["", ""], "[23]": ["", ""], "[closed]": ["CLOSE", "ZU"], "[hibernate]": ["Hiber", "Ruhe"], "[none]": ["&nbsp;", "&nbsp;"], "[set]": ["", ""], "[8]": ["", ""], "[value]": ["", ""], "[14]": ["14", "14"], "[9]": ["", ""], "[10]": ["", ""], "[7]": ["", ""], "[12]": ["", ""], "[5]": ["", ""], "[numbers]": ["", ""], "[3]": ["", ""], "[toggle]": ["", ""], "[11]": ["", ""], "[1]": ["", ""]}, "devices.json": {}, "views.json": {"-": ["All(Admin)", "Alles(Admin)"]}, "templatesCfg.jsonnames": {"guiSettings": "settings", "executeCommand": "executeCommand", "changeUser": "changeUser", "default1": "default&nbsp;(8)", "configuration": "configuration", "default2": "default&nbsp;1+(6)", "defaultMenu2": "defaultMenu&nbsp;(2)", "defaultMenu1": "defaultMenu&nbsp;(4)"}, "templatesCfg.jsonwinpc": {"0": ["Power", "Power"]}, "programs.json": {}, "files.json": {"configuration": ["Configuration", "Konfiguration"],"dashboard": ["Dashboard","Dashboard"]}, "interfaces.json": {}, "users.json": {}, "statesCfg.jsonnames": {}, "templatesCfg.jsonwinpcbrowser": {"0": ["", ""]}, "devices.jsonnames": {"-": "SERVER"}, "extensionsCfg.jsonnames": {}, "pages.json": {"0": ["Server", "Server"], "executeCommand": ["", ""], "changeUser": ["", ""], "configuration": ["", ""], "guiSettings": ["", ""]}, "programs.jsonnames": {}, "templatesCfg.jsonwinpcnames": {"0": "Power"}, "pages.jsonnames": {"0": "Server", "executeCommand": "executeCommand", "changeUser": "changeUser", "configuration": "configuration", "guiSettings": "settings"}, "views.jsonnames": {"-": "All"}, "templatesCfg.jsonwinpcmousekeyboard": {"0": ["", ""]}, "templatesCfg.json": {"changeUser": ["Change<br>User", "Benutzer<br>Wechseln"], "guiSettings": ["Settings", "Einstellungen"], "executeCommand": ["Execute<br>Command", "Befehl<br>Ausf&uuml;hren"], "winpcmousekeyboard": ["Mouse&nbsp;/<br>Keyboard", "Maus&nbsp;/<br>Tastatur"], "winpc": ["PC", "PC"], "winpcbrowser2": ["", ""], "default1": ["", ""], "winpcbrowser": ["File<br>Browser", "Datei<br>System"], "default2": ["", ""], "configuration": ["Configuration", "Konfiguration"], "defaultMenu2": ["", ""], "defaultMenu1": ["", ""]}, "interfaces.jsonnames": {}, "statesCfg.json": {"[22]": ["22", "22"], "[up]": ["<img src='/img/up2.png' />", "<img src='/img/up2.png' />"], "[off]": ["OFF", "AUS"], "[all]": ["All", "Alle"], "[18]": ["18", "18"], "[20]": ["20", "20"], "[?]": ["?", "?"], "[activate]": ["Execute", "Ausf&uuml;hren"], "[restart]": ["RESTART", "NEUSTART"], "[13]": ["13", "13"], "[16]": ["16", "16"], "[on]": ["ON", "AN"], "[15]": ["15", "15"], "[17]": ["17", "17"], "[stop]": ["STOP", "STOP"], "[6]": ["6", "6"], "[error]": ["ERROR", "FEHLER"], "[4]": ["4", "4"], "[2]": ["2", "2"], "[0]": ["0", "0"], "[open]": ["OPEN", "AUF"], "[down]": ["<img src='/img/down2.png' />", "<img src='/img/down2.png' />"], "[25]": ["25", "25"], "[standby]": ["STANDBY", "STANDBY"], "[21]": ["21", "21"], "[19]": ["19", "19"], "[24]": ["24", "24"], "[23]": ["23", "23"], "[closed]": ["CLOSED", "ZU"], "[hibernate]": ["HIBERNATE", "RUHEZUSTAND"], "[none]": ["UNSELECT", "ABW&Auml;HLEN"], "[set]": ["to", "auf"], "[8]": ["8", "8"], "[value]": ["{value}", "{value}"], "[14]": ["14", "14"], "[9]": ["9", "9"], "[10]": ["10", "10"], "[7]": ["7", "7"], "[12]": ["12", "12"], "[5]": ["5", "5"], "[numbers]": ["Numbers", "Nummern"], "[3]": ["3", "3"], "[toggle]": ["Toggle", "Umschalten"], "[11]": ["11", "11"], "[1]": ["1", "1"]}, "extensionsCfg.json": {}}

def pages():
    return [["0", "-", "devices/-", "winpc", "", "", [""]], ["executeCommand", "-", "-", "executeCommand", "", "", [""]], ["changeUser", "-", "-", "changeUser", "", "", [""]], ["guiSettings", "-", "-", "guiSettings", "", "", [""]], ["configuration", "-", "-", "configuration", "", "", [""]]]
    
def templatesCfg():
    return [["winpc", "1.2", "-", "PC_WIN", "/systemTemplates/winPc/pcframeindex.html", "[[\"0\",\"PC_WIN\",\"power\",[\"0\",\"2\"],[\"[on]\",\"[restart]\",\"[standby]\",\"[hibernate]\",\"[off]\"],\"\",\"{\\\"[on]\\\":[[\\\"PC.Main.OnInit\\\",\\\"[\\\\\\\"{target.0}\\\\\\\",null]\\\",\\\"OR\\\"],[\\\"PC.System.Resume\\\",\\\"[\\\\\\\"{target.0}\\\\\\\",null]\\\",\\\"OR\\\"],[\\\"PC.System.ResumeAutomatic\\\",\\\"[\\\\\\\"{target.0}\\\\\\\",null]\\\",\\\"\\\"]],\\\"[restart]\\\":[[\\\"\\\",\\\"\\\",\\\"\\\"]],\\\"[standby]\\\":[[\\\"Button.State.*/winpc/winpc/{target.0}.[standby]\\\",\\\"\\\",\\\"THEN\\\"],[\\\"PC.O-MEGA.Ping.PC.{target.0}.OFF\\\",\\\"\\\",\\\"\\\"]],\\\"[hibernate]\\\":[[\\\"Button.State.*/winpc/winpc/{target.0}.[hibernate]\\\",\\\"\\\",\\\"THEN\\\"],[\\\"PC.O-MEGA.Ping.PC.{target.0}.OFF\\\",\\\"\\\",\\\"\\\"]],\\\"[off]\\\":[[\\\"PC.O-MEGA.Ping.PC.{target.0}.OFF\\\",\\\"\\\",\\\"\\\"]],\\\"[value]\\\":[[\\\"\\\",\\\"\\\",\\\"\\\"]],\\\"[error]\\\":[[\\\"\\\",\\\"\\\",\\\"\\\"]]}\",\"{\\\"[on]\\\":{\\\"cssClasses\\\":\\\"\\\",\\\"rename\\\":\\\"\\\",\\\"buttonModes\\\":[{\\\"mode\\\":\\\"std\\\",\\\"modeSettings\\\":\\\"\\\"},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0}]},\\\"[restart]\\\":{\\\"cssClasses\\\":\\\"\\\",\\\"rename\\\":\\\"\\\",\\\"buttonModes\\\":[{\\\"mode\\\":\\\"confirm\\\",\\\"modeSettings\\\":\\\"\\\"},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0}]},\\\"[standby]\\\":{\\\"cssClasses\\\":\\\"\\\",\\\"rename\\\":\\\"\\\",\\\"buttonModes\\\":[{\\\"mode\\\":\\\"std\\\",\\\"modeSettings\\\":\\\"\\\"},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0}]},\\\"[hibernate]\\\":{\\\"cssClasses\\\":\\\"\\\",\\\"rename\\\":\\\"\\\",\\\"buttonModes\\\":[{\\\"mode\\\":\\\"std\\\",\\\"modeSettings\\\":\\\"\\\"},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0}]},\\\"[off]\\\":{\\\"cssClasses\\\":\\\"\\\",\\\"rename\\\":\\\"\\\",\\\"buttonModes\\\":[{\\\"mode\\\":\\\"confirm\\\",\\\"modeSettings\\\":\\\"\\\"},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0},{\\\"mode\\\":\\\"none\\\",\\\"modeSettings\\\":\\\"\\\",\\\"onlyRecord\\\":0}]}}\",1]]", 0, "{\"deticatedFrame\":1,\"emptyCache\":0,\"forceReload\":0}"], ["winpcbrowser", "1.1", "winpc", "PC_WIN", "/systemTemplates/winPcBrowser/browserframe.html", "[[\"0\",\"PC_WIN\",\"power\",[\"-10\",\"1\"],[\"[on]\",\"[off]\"],\"\",\"\",\"\",1]]", 0, "{\"deticatedFrame\":1,\"emptyCache\":0,\"forceReload\":0}"], ["winpcbrowser2", "1.1", "winpcbrowser", "PC_WIN", "", "", 0, "{\"deticatedFrame\":1,\"emptyCache\":0,\"forceReload\":0}"], ["winpcmousekeyboard", "1.1", "winpc", "PC_WIN", "/systemTemplates/winPcMouseKeyboard/mouseKeyboardframe.html", "[[\"0\",\"PC_WIN\",\"power\",[\"-10\",\"1\"],[\"[on]\",\"[off]\"],\"\",\"\",\"\",1]]", 0, ""], ["default1", "1.1", "-", "-", "/systemTemplates/default1/defaultframe.html", "", 1, ""], ["default2", "1.0", "-", "-", "/systemTemplates/default2/defaultframe.html", "", 1, ""], ["defaultMenu1", "1.1", "-", "-", "/systemTemplates/menu1/menuindex.html", "", 1, "{\"deticatedFrame\":1,\"emptyCache\":0,\"forceReload\":0}"], ["defaultMenu2", "1.1", "-", "-", "/systemTemplates/menu2/menuindex.html", "", 1, "{\"deticatedFrame\":1,\"emptyCache\":0,\"forceReload\":0}"], ["changeUser", "1.0", "-", "-", "/systemTemplates/settings/changeUser.html", "", 0, "{\"deticatedFrame\":0,\"emptyCache\":0,\"forceReload\":0}"], ["guiSettings", "1.0", "-", "-", "/systemTemplates/settings/gui.html", "", 0, "{\"deticatedFrame\":0,\"emptyCache\":0,\"forceReload\":0}"], ["executeCommand", "1.0", "-", "-", "/systemTemplates/settings/executeCommand.html", "", 0, "{\"deticatedFrame\":0,\"emptyCache\":0,\"forceReload\":0}"], ["configuration", "1.0", "-", "-", "/systemTemplates/settings/devframe.html", "", 0, "{\"deticatedFrame\":1,\"emptyCache\":0,\"forceReload\":0}"]]

def statesCfg():
    return [["[error]", "red", 0, 1], ["[stop]", "red", 0, 0], ["[restart]", "yellow", 0, 0], ["[activate]", "yellow", 0, 0], ["[on]", "green", 0, 0], ["[open]", "green", 0, 0], ["[down]", "green", 0, 0], ["[?]", "yellow", 0, 1], ["[standby]", "yellow", 0, 0], ["[hibernate]", "red", 0, 0], ["[off]", "red", 1, 0], ["[closed]", "red", 0, 0], ["[up]", "red", 0, 0], ["[none]", "red", 0, 1], ["[toggle]", "green", 0, 0], ["[value]", "green", 0, 0], ["[0]", "green", 0, 0], ["[1]", "green", 0, 0], ["[2]", "green", 0, 0], ["[3]", "green", 0, 0], ["[4]", "green", 0, 0], ["[5]", "green", 0, 0], ["[6]", "green", 0, 0], ["[7]", "green", 0, 0], ["[8]", "green", 0, 0], ["[9]", "green", 0, 0], ["[10]", "green", 0, 0], ["[11]", "green", 0, 0], ["[12]", "green", 0, 0], ["[13]", "green", 0, 0], ["[14]", "green", 0, 0], ["[15]", "green", 0, 0], ["[16]", "green", 0, 0], ["[17]", "green", 0, 0], ["[18]", "green", 0, 0], ["[19]", "green", 0, 0], ["[20]", "green", 0, 0], ["[21]", "green", 0, 0], ["[22]", "green", 0, 0], ["[23]", "green", 0, 0], ["[24]", "green", 0, 0], ["[25]", "green", 0, 0], ["[set]", "green", 0, 1], ["[numbers]", "green", 0, 1], ["[all]", "green", 0, 1]]

def extensions():
    return [["PC_WIN", "1.5", "device", [""], "[[\"masterAudio\",\"1\"]]", "[[\"host\",\"IP Address\",\"str\",\"\"],[\"mac\",\"MAC Address (Optional)\",\"str\",\"\"],[\"maxOnTime\",\"Time it may take to power on the device (s)\",\"num\",\"60\"],[\"maxOffTime\",\"Time it may take to power off the device (s)\",\"num\",\"60\"]]", "{\"[on]\":[[\"PC.Main.OnInit\",\"[\\\"{target.0}\\\",*]\",\"OR\"],[\"PC.System.Resume\",\"[\\\"{target.0}\\\",*]\",\"OR\"],[\"PC.System.ResumeAutomatic\",\"[\\\"{target.0}\\\",*]\",\"\"]],\"[off]\":[[\"PC.O-MEGA.Ping.PC.{target.0}.OFF\",\"\",\"OR\"],[\"PC.Main.OnClose\",\"[\\\"{target.0}\\\",*]\",\"\"]],\"[error]\":[[\"\",\"\",\"\"]]}", "[[\"power\",\"Power\",\"[on],[restart],[standby],[hibernate],[off]\"],[\"pyCommand\",\"Python Command\",\"[all]\"],[\"event\",\"Trigger Event\",\"[all]\"]]", "{\"power\":{\"[on]\":[],\"[restart]\":[],\"[standby]\":[],\"[hibernate]\":[],\"[off]\":[]},\"pyCommand\":{\"[all]\":[[\"p1\",\"Python Command to send (part1)\",\"str\",\"\",\"0\"],[\"p2\",\"(part2)\",\"str\",\"\",\"0\"],[\"p3\",\"(part3)\",\"str\",\"\",\"0\"],[\"p4\",\"(part4)\",\"str\",\"\",\"0\"],[\"p5\",\"(part5)\",\"str\",\"\",\"0\"],[\"p6\",\"(part6)\",\"str\",\"\",\"0\"],[\"p7\",\"(part7)\",\"str\",\"\",\"0\"],[\"p8\",\"(part8)\",\"str\",\"\",\"0\"],[\"p9\",\"(part9)\",\"str\",\"\",\"0\"]]},\"event\":{\"[all]\":[[\"suffix\",\"Additional Event Suffix\",\"str\",\"\",\"0\"],[\"payload\",\"Additional Event Payload\",\"str\",\"\",\"0\"]]}}", "", "{\"power\":{\"[on]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"std\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]},\"[restart]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"confirm\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]},\"[standby]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"std\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]},\"[hibernate]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"std\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]},\"[off]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"confirm\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]}},\"pyCommand\":{\"[all]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"std\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]}},\"event\":{\"[all]\":{\"cssClasses\":\"\",\"rename\":\"\",\"buttonModes\":[{\"mode\":\"std\",\"modeSettings\":\"\"},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0},{\"mode\":\"none\",\"modeSettings\":\"\",\"onlyRecord\":0}]}}}"], ["Ping", "1.1", "interface", [""], "", "[[\"host\",\"IP Address\",\"str\",\"\"]]", "", "", "", "", ""], ["Generic_Prog", "2.1", "program", [""], "", "[[\"filePath\",\"Path to executable (.exe)\",\"str\",\"\"],[\"runParameter\",\"Run parameter (optional)\",\"str\",\"\"],[\"commandToClose\",\"Python command to close program (optional)\",\"str\",\"\"],[\"runAsAdmin\",\"Run as Administrator (works only if EventGhost is executed as Administrator)\",\"checkbox\",\"0\"],[\"onEvent\",\"EventGhost event that appears if this program starts\",\"str\",\"\"],[\"offEvent\",\"EventGhost event that appears if this program closes\",\"str\",\"\"]]", "{\"[on]\":[[\"PC.{target.2.onEvent}\",\"[\\\"{target.3}\\\",*]\",\"\"]],\"[off]\":[[\"PC.{target.2.offEvent}\",\"[\\\"{target.3}\\\",*]\",\"\"]],\"[error]\":[]}", "[[\"power\",\"Power\",\"[on],[off]\"]]", "{\"power\":{\"[on]\":[],\"[off]\":[]}}", "", ""], ["Pseudo_Device", "1.2", "device", [""], "", "[[\"buttonIDSelector\",\"Select the button this pseudo device is referring to\",\"str\",\"\"],[\"maxOnTime\",\"Time it may take to power on the device (s)\",\"num\",\"10\"],[\"maxOffTime\",\"Time it may take to power off the device (s)\",\"num\",\"10\"],[\"maxOnRetry\",\"How often sould it be retried to power on the device if the event doesn't appear in time? (-1 = infinite)\",\"num\",\"0\"],[\"maxOffRetry\",\"How often sould it be retried to power off the device if the event doesn't appear in time? (-1 = infinite)\",\"num\",\"0\"]]", "", "[[\"power\",\"Power\",\"[on],[off]\"]]", "", "", ""]]

def actionEvents():
    return []
    
def buttonStates():
    return {}

def devices(thisPcName):
    return [["-", "PC_WIN", "{\"host\":\""+thisPcName+"\",\"mac\":\"\"}", "-", [""]]]

def interfaces():
    return []
    
def programs():
    return []

def sceneNames():
    return []
    
def sceneActions():
    return {}
    
def userSettings():
    return {}
    
def buttonStates():
    return {}
    
def States():
    return {}
    
def views():
    return [["-", "-"]]
    
def users():
    return [["default", "", [""], "{\"isAdmin\":1,\"isSceneEditor\":1}"]]
    
def doku():
    return [["ApplyHandlerEnduring", "function", "omega.ApplyHandlerEnduring(object)", "Applies a handler on an element that triggers the <a href=\"#TriggerEndureingEvent \">TriggerEndureingEvent</a> function as the element is pushed and then the <a href=\"#RepeatEndureingEvent \">RepeatEndureingEvent</a> function multiple times as long as the element is being pushed and the <a href=\"#EndLastEvent\">EndLastEvent</a> function if the element is released.", "Bool", "false if something is missing and true if it worked", "[[\"targetElement\",1,\"Element\",\"Element identified by parameter \\\"targetId\\\"\",\"\",\"Element the handler should be applied on (if you specify the parameter \\\"targetId\\\" you don't need to specifiy the parameters \\\"TargetElement\\\")\"],[\"targetId\",0,\"String\",\"\",\"\",\"HTML Object-ID of the element the handler should be applied on (if you specify the parameter \\\"targetId\\\" you don't need to specifiy the parameters \\\"TargetElement\\\")\"],[\"eventData\",1,\"Object\",\"\",\"\",\"Object with parameters as you would use for <a href=\\\"#TriggerEvent\\\">TriggerEvent</a>\"]]", "[[\"omega.ApplyHandlerEnduring({targetId:\\\"button1\\\",eventData:{command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]}});\",\"true\"]]"], ["ApplyHandlerMouseWheel", "function", "omega.ApplyHandlerMouseWheel(object)", "Applies a handler on an element that triggers the <a href=\"#TriggerEvent \">TriggerEvent</a> function or another specified function on using your mouse wheel while the curser is hovering over target element.", "Bool", "false if something is missing and true if it worked", "[[\"targetElement\",1,\"Element\",\"Element identified by parameter \\\"targetId\\\"\",\"\",\"Element the handler should be applied on (if you specify the parameter \\\"targetId\\\" you don't need to specifiy the parameters \\\"TargetElement\\\")\"],[\"targetId\",0,\"String\",\"\",\"\",\"HTML Object-ID of the element the handler should be applied on (if you specify the parameter \\\"targetId\\\" you don't need to specifiy the parameters \\\"TargetElement\\\")\"],[\"funcUp\",1,\"Function\",\"omega.TriggerEvent with parameter \\\"eventData\\\" as 1st parameter (\\\"[up]\\\" is added to eventData.targetState automatically)\",\"\",\"Function that is called if you move the mouse wheel up\"],[\"funcDown\",1,\"Function\",\"omega.TriggerEvent with parameter \\\"eventData\\\" as 1st parameter (\\\"[down]\\\" is added to eventData.targetState automatically)\",\"\",\"Function that is called if you move the mouse wheel down\"],[\"eventData\",0,\"Object\",\"\",\"\",\"Short hand parameter for using omega.TriggerEvent as \\\"funcUp\\\" and \\\"funcDown\\\" parameter, you can use it if you like to trigger an event on an mouse wheel action.<br>Object with parameters as you would use for <a href=\\\"#TriggerEvent\\\">TriggerEvent</a>.<br>The parameters \\\"[up]\\\" and \\\"[down]\\\" are added to eventData.targetState, dependent on if you would scroll up or down (if you specify the parameter \\\"eventData\\\" you don't need to specify the parameters \\\"funcUp\\\" and \\\"funcDown\\\")\"]]", "[[\"omega.ApplyHandlerMouseWheel({targetId:\\\"button1\\\",eventData:{command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]}});\",\"true\"]]"], ["ApplyHandlerRepeat", "function", "omega.ApplyHandlerRepeat(object)", "Applies an auto repeat handler on target element. As long as target element is pushed, the assigned function, or event, is triggered in a custom interval.", "Bool", "false if something is missing and true if it worked", "[[\"targetElement\",1,\"Element\",\"Element identified by parameter \\\"targetId\\\"\",\"\",\"Element the handler should be applied on (if you specify the parameter \\\"targetId\\\" you don't need to specifiy the parameters \\\"TargetElement\\\")\"],[\"targetId\",0,\"String\",\"\",\"\",\"HTML Object-ID of the element the handler should be applied on (if you specify the parameter \\\"targetId\\\" you don't need to specifiy the parameters \\\"TargetElement\\\")\"],[\"func\",1,\"Function\",\"omega.TriggerEvent with parameter \\\"eventData\\\" as 1st parameter\",\"\",\"Function to be executed in the desired interval (if you specify the parameter \\\"eventData\\\" you don't need to specify the parameter \\\"func\\\")\"],[\"eventData\",0,\"Object\",\"\",\"\",\"Short hand parameter for using omega.TriggerEvent as \\\"func\\\" parameter, you can use it if you like to trigger an event that is repeated as long as the target element is beeing pushed.<br>Object with parameters as you would use for <a href=\\\"#TriggerEvent\\\">TriggerEvent</a> (if you specify the parameter \\\"eventData\\\" you don't need to specify the parameter \\\"func\\\")\"],[\"interval\",0,\"Float\",\"0.5\",\"\",\"Interval in secounds in which the function/event should be triggered\"]]", "[[\"omega.ApplyHandlerRepeat({targetId:\\\"button1\\\",eventData:{command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]},interval:1.0});\",\"true\"]]"], ["CreateButtonTable", "function", "omega.CreateButtonTable(object)", "Prints the buttons that were configured in the page settings for the current page (table) into an HTML object with the given object ID", "Bool", "false if something is missing and true if it worked", "[[\"targetElement\",1,\"Element\",\"Element determined by parameter \\\"targetId\\\"\",\"\",\"HTML element the buttons (table) should be printed in\"],[\"targetId\",0,\"String\",\"\",\"\",\"HTML Object-ID of the element the buttons (table) should be printed in (if you use this parameter, you don't need to specify the parameter \\\"targetElement)\"],[\"maxCols\",0,\"Integer\",\"8\",\"Integer > 0\",\"The width of the button grid\"],[\"startButtonIndex\",0,\"Integer\",\"0\",\"\",\"Index of the first button in the page configuration that should be printed into this table\"],[\"endButtonIndex\",0,\"Integer\",\"Index of the last button\",\"\",\"Index of the last button in the page configuration that should be printed into this table\"]]", "[[\"omega.CreateButtonTable({targetId:\\\"tableContentContainer\\\",startButtonIndex:3});\",\"true\"]]"], ["CreateModeMenu", "function", "omega.CreateModeMenu(object)", "Prints a selector (table) for all defined sub pages into an object with the given object-ID. Also creates the iframe structure for the sub pages.<br>This function can only be used on pages with subpages!", "Bool", "false if something is missing and true if it worked", "[[\"targetElement\",1,\"Element\",\"Element determined by parameter \\\"targetId\\\"\",\"\",\"HTML element the buttons (table) should be printed in\"],[\"targetId\",0,\"String\",\"\",\"\",\"HTML Object-ID of the element the buttons (table) should be printed in (if you use this parameter, you don't need to specify the parameter \\\"targetElement)\"],[\"maxCols\",0,\"Integer\",\"8\",\"Integer > 0\",\"The width of the button grid\"],[\"showStates\",0,\"Bool\",\"false\",\"true: Print the states of the sub pages in the menu;false: Don't print the states of the sub pages in the menu\",\"Determines if the current page state of the sub pages should be printed beside the selector\"],[\"record\",0,\"Bool\",\"true\",\"true: Make the sub page linkable to the dashboard;false: Don't make the sub page linkable to the dashboard\",\"\"],[\"startVisibleMinWidth\",0,\"Integer\",\"1050\",\"Integer >= 0\",\"\"],[\"printNoTable\",0,\"Bool\",\"false\",\"true: No table will be printed;false: A table will be printed\",\"If true, the parameters \\\"targetElement\\\" and \\\"targetId\\\" are not required\"]]", "[[\"omega.CreateModeMenu({targetId:\\\"myHTMLObjectId\\\",showStates:true});\",\"true\"]]"], ["EndLastEvent", "function", "omega.EndLastEvent()", "Ends the event triggered by the function <a href=\"#TriggerEnduringEvent\">TriggerEnduringEvent</a>", "undefined", "", "", "[[\"omega.EndLastEvent();\",\"undefined\"],[\"var myInterval;<br><br>if (omega.TriggerEnduringEvent({command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]})){<br>&nbsp;&nbsp;myInterval = setInterval(repeatEvent,1000);<br>&nbsp;&nbsp;setTimeout(endEvent,10000);<br>}<br><br>function repeatEvent(){<br>&nbsp;&nbsp;omega.RepeatEnduringEvent();<br>}<br><br>function endEvent(){<br>&nbsp;&nbsp;clearInterval(myInterval);<br>&nbsp;&nbsp;omega.EndLastEvent();<br>}\",\"\"]]"], ["GetSetting", "function", "omega.GetSetting(object)", "Returns the current value of target setting data item", "undefined", "the current value of target setting data item (may be String, Integer or Float)", "[[\"name\",1,\"String\",\"\",\"\",\"Name of target configuration data item\"],[\"targetCategory\",0,\"String\",\"category of the target of the current page\",\"\\\"devices\\\",\\\"programs\\\"\",\"The category the desired target is assigned to\"],[\"targetId\",0,\"String\",\"targetId of the target of current page\",\"\",\"The targetId or the desired target\"]]", "[[\"omega.GetSetting({name:\\\"ip\\\"});\",\"\\\"192.168.0.1\\\" ...if the parameter \\\"ip\\\" exists and if that is the current value\"]]"], ["GetValue", "function", "omega.GetValue(object)", "Returns the current value of target configuration data item", "undefined", "the current value of target configuration data item (may be String, Integer or Float)", "[[\"name\",1,\"String\",\"\",\"\",\"Name of target configuration data item\"],[\"targetCategory\",0,\"String\",\"category of the target of the current page\",\"\\\"devices\\\",\\\"programs\\\"\",\"The category the desired target is assigned to\"],[\"targetId\",0,\"String\",\"targetId of the target of current page\",\"\",\"The targetId or the desired target\"]]", "[[\"omega.GetValue({name:\\\"power\\\"});\",\"\\\"[on]\\\" ...or what ever the current power state is\"]]"], ["GetText", "function", "omega.GetText(object)", "Translates Text into a specific language, needed for multi-language support", "String", "the translation of a specific text id", "[[\"text\",1,\"String\",\"\",\"\",\"Text-id of the text that should be translated\"],[\"mode\",0,\"String / Integer\",\"\",\"\",\"Mode of the translation to get\"],[\"language\",0,\"Integer\",\"Language-id for the selected UI language. If the desired language is not available, 0 (English) will be used\",\"0:English;1:German\",\"Language-id that specifies the language for the translation\"]]", "[[\"omega.GetText({text:\\\"hello\\\",language:0});\",\"\\\"Hello\\\"\"]]"], ["GetUserSetting", "function", "omega.GetUserSetting(object)", "Returns the current value of target user settings data item for current user that has previously been set by <a href=\"#SetUserSetting\">SetUserSetting</a> on the device or program that is associated with this template, or the value of target global user setting (set in the gui under: settings->user settings) if the parameter \"global\" is true", "undefined", "the current value of target user settings data item for current user (may be String, Integer, Float, Array, Dict). Returns undefined if the parameter \"name\" is missing or if the settings data item doesn't exist.", "[[\"name\",1,\"String\",\"\",\"\\\"language\\\",\\\"advancedConfig\\\",\\\"useFullscreen\\\",\\\"backgroundPath\\\",\\\"effectTimePage\\\",\\\"effectTimeSlide\\\"\",\"Name of target user settings data item.<br>If the parameter \\\"global\\\" is true, the following values are possible.\"],[\"global\",0,\"Bool\",\"false\",\"true: The function returns the value of target global setting;false: The function returns the value of target the setting for target device/program\",\"\"]]", "[[\"omega.GetUserSetting({name:\\\"mySetting\\\"});\",\"Value of \\\"mySetting\\\" for current user on the current page\"],[\"omega.GetUserSetting({name:\\\"effectTimeSlide\\\",global:true});\",\"Value of the gobal user setting \\\"effectTimeSlide\\\" \"]]"], ["MultiTriggerCheck", "function", "omega.MultiTriggerCheck(object)", "You can use this function to determine if something has been triggered multible times in a row (e.g. If a button has been pressed two times in a row)", "Integer", "the number of calls in a row", "[[\"id\",1,\"String\",\"\",\"\",\"Identifyer for the call type\"],[\"time\",0,\"Integer\",\"300\",\"\",\"Maximum time beween triggers (ms)\"],[\"callback\",0,\"Function\",\"\",\"\",\"Function that is called after the series ended (this function is called with the maximum number of triggers (Integer) as first parameter)\"]]", "[[\"omega.MultiTriggerCheck({id:\\\"button1\\\"});\",\"1\"]]"], ["OnLoad", "function", "omega.OnLoad(function)", "Registers a custom function to be executed at the end of loading the page (before the <a href=\"#OnUpdate\">OnUpdate</a> functions are executed)", "Bool", "false if something is missing and true if it worked", "[[\"1\",1,\"function\",\"\",\"\",\"Function to be registered\"]]", "[[\"omega.OnLoad(function(){<br>&nbsp;&nbsp;alert(\\\"Page almost loaded!\\\");<br>});\",\"true\"]]"], ["OnMenuHide", "function", "omega.OnMenuHide(function)", "Registers a callback function that is triggered if you press the \"<<\" button on this page.<br>This function can only be used on pages with subpages!", "Bool", "false if something is missing and true if it worked", "[[\"1\",1,\"function\",\"\",\"\",\"Function to be registered\"]]", "[[\"omega.OnMenuShow(function(){alert(\\\"Hide menu!\\\");});\",\"true\"]]"], ["OnMenuShow", "function", "omega.OnMenuShow(function)", "Registers a callback function that is triggered if you press the \">>\" button on this page.<br>This function can only be used on pages with subpages!", "Bool", "false if something is missing and true if it worked", "[[\"1\",1,\"function\",\"\",\"\",\"Function to be registered\"]]", "[[\"omega.OnMenuShow(function(){alert(\\\"Show menu!\\\");});\",\"true\"]]"], ["OnUpdate", "function", "omega.OnUpdate(function)", "Registers a custom function to be executed after the page has been fully loaded or if new data is available or if the reload button has been pressed", "Bool", "false if something is missing and true if it worked", "[[\"1\",1,\"function\",\"\",\"\",\"Function to be registered. The registered function will be executed with 1 parameter (String) that can have one of the following values:<br>\\\"load\\\": Page has been fully loaded<br>\\\"data\\\": New data is available<br>\\\"reload\\\": The reload button has been pressed\"]]", "[[\"omega.OnLoad(function(which){<br>&nbsp;&nbsp;alert(\\\"Data update because: \\\"+which);<br>});\",\"true\"]]"], ["RemovePageTitle", "function", "omega.RemovePageTitle()", "Removes the page title from the template and ensures that it's not displayed again. Usually you call this function from the <a href=\"#OnLoad\">OnLoad</a> callback function to ensure that the title is never displayed", "undefined", "", "", "[[\"omega.RemovePageTitle()\",\"\"]]"], ["RepeatEnduringEvent", "function", "omega.RepeatEnduringEvent()", "Repeats the event triggered by the function <a href=\"#TriggerEnduringEvent\">TriggerEnduringEvent</a> (needs to be triggered at least every 2 secounds, better every 1 secound, to keep the event enduring)", "undefined", "", "", "[[\"omega.RepeatEnduringEvent();\",\"undefined\"],[\"var myInterval;<br><br>if (omega.TriggerEnduringEvent({command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]})){<br>&nbsp;&nbsp;myInterval = setInterval(repeatEvent,1000);<br>}<br><br>function repeatEvent(){<br>&nbsp;&nbsp;omega.RepeatEnduringEvent();<br>}\",\"\"]]"], ["Request", "function", "omega.Request(object)", "Requests data from the backend on demand. Use this function to request a large amount of data (like lists etc.) instead of storing it in a device/program specific variable", "Bool", "false if something is missing and true if it worked", "[[\"method\",1,\"String\",\"\",\"\",\"Alias you registered for the target function in the backend\"],[\"args\",0,\"Array\",\"\",\"\",\"Arguments to be passed to the target function\"],[\"kwargs\",0,\"Dict\",\"\",\"\",\"Key word arguments to be passed to the target function\"],[\"callback\",0,\"Function\",\"\",\"\",\"Function that will be called once the data has been processed in the backend. This function will get the handed over the result of the target function\"],[\"targetpc\",0,\"String\",\"If your template is for a program, the ID of the PC your program runs on. Else the ID of your server\",\"\",\"ID of the PC target function should be executed on\"]]", "[[\"omega.Request({'method':'myAlertDataFunction','args':['warning1'],'callback':function(data){<br>&nbsp;&nbsp;alert(data);<br>}});\",\"true\"]]"], ["SetFullscreen", "function", "omega.SetFullscreen(object)", "Sets the current page into fullscreen mode or leaves fullscreen mode", "undefined", "", "[[\"active\",1,\"Bool\",\"false\",\"true: Activates fullscreen mode for the current page;false: Deactivated fullscreen mode\",\"Specifies if you like to activate fullscreen mode for the current page or if you like to deactivate it\"]]", "[[\"omega.SetFullscreen({active:true})\",\"\"]]"], ["SetUserSetting", "function", "omega.SetUserSetting(object)", "Sets a value for target user settings data item for current user and saves it persistently. You can retrieve the current value of target setting with the function <a href=\"#GetUserSetting\">GetUserSetting</a>", "Bool", "false if something is missing and true if it worked", "[[\"name\",1,\"String\",\"\",\"\",\"Name of target user settings data item\"],[\"value\",1,\"String, Integer, Float, Array, Dict (as long as it contains no object)\",\"\",\"\",\"New value for target user settings data item\"],[\"callback\",0,\"Function\",\"\",\"\",\"Optional callback function\"]]", "[[\"omega.SetUserSetting({name:\\\"mySetting\\\",value:123});\",\"true\"]]"], ["ShowAlertBox", "function", "omega.ShowAlertBox(object)", "Shows a pop-up that displays some text.", "Bool", "false if something is missing and true if it worked", "[[\"text\",1,\"String\",\"\",\"\",\"Text to be displayed on the pop-up\"],[\"callback\",0,\"Function\",\"\",\"\",\"Function that will be executed when the pop-up window is closed. An object will be passed to that function with the parameter \\\"OK\\\":Bool:true if OK has been pressed to close the pop-up and false otherwise\"],[\"selectedObject\",0,\"Object\",\"\",\"\",\"A HTML object, usually \\\"this\\\". The specified object will blink as long as the popup is open\"]]", "[[\"omega.ShowAlertBox({text:\\\"Hello World!\\\"});\",\"true\"]]"], ["ShowInputBox", "function", "omega.ShowInputBox(object)", "Shows a pop-up with an input box. You can pass the value to a callback function or directly trigger an event in EventGhost.", "Bool", "false if something is missing and true if it worked", "[[\"command\",0,\"String\",\"\",\"\",\"Last part of the event suffix (if \\\"callback\\\" is not defined)\"],[\"data\",0,\"String / Integer / Array / Dict\",\"\\\"\\\"\",\"\",\"If defined (and if \\\"command\\\" is defined and \\\"callback\\\" is not defined), adds an additional payload [\\\"data\\\"] to the event\"],[\"callback\",1,\"Function\",\"Function that triggers an event based on the parameter \\\"command\\\", \\\"data\\\" (as payload [\\\"data\\\"]) and the value of the input box as payload [\\\"targetState\\\"][1] (payload [\\\"targetState\\\"][0] is always \\\"[value]\\\")\",\"\",\"Function that will be executed when the pop-up window is closed. An object will be passed to that function with the parameter \\\"OK\\\":Bool:true if OK has been pressed to close the pop-up and false otherwise, \\\"data\\\":String:the selected number, \\\"lable\\\":String:lable text. This parameter is not required if \\\"command\\\" is defined\"],[\"preset\",0,\"Integer / Float\",\"Value of parameter \\\"min\\\"\",\"\",\"Pre-selected number for the pop-up\"],[\"target\",0,\"String\",\"Assigned Target to the page you called the function from\",\"\",\"Target type + \\\"/\\\" + target id. E.g. \\\"devices/0\\\"\"],[\"lable\",0,\"String\",\"Value of the parameter \\\"command\\\"\",\"\",\"Text that will be displayed on the dashboard after this action has been recorded\"],[\"parameters\",0,\"Dict\",\"{type:\\\"text\\\",maxlength:100}\",\"\",\"Parameters to directly configure the HTML input tag that is used to display the input box\"],[\"text\",0,\"String\",\"Value of parameter \\\"lable\\\"\",\"\",\"Text that is displayed on the popup above the input box\"],[\"selectedObject\",0,\"Object\",\"\",\"\",\"A HTML object, usually \\\"this\\\". The specified object will blink as long as the popup is open\"]]", "[[\"omega.ShowInputBox({text:\\\"Please enter your name:\\\",command:\\\"changeName\\\",lable:\\\"Change name\\\",preset:\\\"New Name\\\",parameters{maxlength:20},selectedObject:this});\",\"true\"]]"], ["ShowNumberBox", "function", "omega.ShowNumberBox(object)", "Shows a pop-up to select a number. You can pass the value to a callback function or directly trigger an event in EventGhost.", "Bool", "false if something is missing and true if it worked", "[[\"command\",0,\"String\",\"\",\"\",\"Last part of the event suffix (if \\\"callback\\\" is not defined)\"],[\"data\",0,\"String / Integer / Array / Dict\",\"\\\"\\\"\",\"\",\"If defined (and if \\\"command\\\" is defined and \\\"callback\\\" is not defined), adds an additional payload [\\\"data\\\"] to the event\"],[\"variable\",1,\"String\",\"Namespace of the device / program this template is assigned to + value of the parameter \\\"command\\\" as name of the variable\",\"\",\"Python variable that stores the value for this element in the backend. This parameter is not required if \\\"command\\\" is defined\"],[\"callback\",1,\"Function\",\"Function that triggers an event based on the parameter \\\"command\\\", \\\"data\\\" (as payload [\\\"data\\\"]) and the selected number as payload [\\\"targetValue\\\"][0] (payload [\\\"targetState\\\"] is always \\\"[value]\\\")\",\"\",\"Function that will be executed when the pop-up window is closed. An object will be passed to that function with the parameter \\\"OK\\\":Bool:true if OK has been pressed to close the pop-up and false otherwise, \\\"data\\\":String:the selected number, \\\"lable\\\":String:lable text. This parameter is not required if \\\"command\\\" is defined\"],[\"min\",0,\"Integer / Float\",\"0\",\"\",\"Minimum (smallest number to select)\"],[\"max\",0,\"Integer / Float\",\"100\",\"\",\"Maximum (biggest number to select)\"],[\"step\",0,\"Integer / Float\",\"1\",\"\",\"Smallest step between numbers (must be > 0)\"],[\"preset\",0,\"Integer / Float\",\"Value of parameter \\\"min\\\"\",\"\",\"Pre-selected number for the pop-up\"],[\"target\",0,\"String\",\"Assigned Target to the page you called the function from\",\"\",\"Target type + \\\"/\\\" + target id. E.g. \\\"devices/0\\\"\"],[\"lable\",0,\"String\",\"Value of the parameter \\\"command\\\"\",\"\",\"Text that will be displayed on the dashboard after this action has been recorded\"],[\"selectedObject\",0,\"Object\",\"\",\"\",\"A HTML object, usually \\\"this\\\". The specified object will blink as long as the popup is open\"]]", "[[\"omega.ShowNumberBox({lable:GetText({text:\\\"volume\\\"}),command:\\\"volume\\\",preset:10,min:1,max:60,step:0.5});\",\"true\"]]"], ["ShowSliderBox", "function", "omega.ShowSliderBox(object)", "Shows a pop-up with a slider. You can pass the value to a callback function or directly trigger an event in EventGhost.", "Bool", "false if something is missing and true if it worked", "[[\"command\",0,\"String\",\"\",\"\",\"Last part of the event suffix (if \\\"callback\\\" is not defined)\"],[\"data\",0,\"String / Integer / Array / Dict\",\"\\\"\\\"\",\"\",\"If defined (and if \\\"command\\\" is defined and \\\"callback\\\" is not defined), adds an additional payload [\\\"data\\\"] to the event\"],[\"variable\",0,\"String\",\"Namespace of the device / program this template is assigned to + value of the parameter \\\"command\\\" as name of the variable\",\"\",\"Python variable that stores the value for this element in the backend. This parameter is not required if \\\"command\\\" is defined\"],[\"callback\",1,\"Function\",\"Function that triggers an event based on the parameter \\\"command\\\", \\\"data\\\" (as payload [\\\"data\\\"]) and the selected number as payload [\\\"targetValue\\\"][0] (payload [\\\"targetState\\\"] is always \\\"[value]\\\")\",\"\",\"Function that will be executed when the pop-up window is closed. An object will be passed to that function with the parameter \\\"OK\\\":Bool:true if OK has been pressed to close the pop-up and false otherwise, \\\"data\\\":String:the selected number, \\\"lable\\\":String:lable text. This parameter is not required if \\\"command\\\" is defined\"],[\"min\",0,\"Integer / Float\",\"0\",\"\",\"Minimum\"],[\"max\",0,\"Integer / Float\",\"100\",\"\",\"Maximum\"],[\"step\",0,\"Integer / Float\",\"1\",\"\",\"Smallest step (must be > 0)\"],[\"preset\",0,\"Integer / Float\",\"Value of parameter \\\"min\\\"\",\"\",\"Pre-selected number for the pop-up\"],[\"target\",0,\"String\",\"Assigned Target to the page you called the function from\",\"\",\"Target type + \\\"/\\\" + target id. E.g. \\\"devices/0\\\"\"],[\"lable\",0,\"String\",\"Value of the parameter \\\"command\\\"\",\"\",\"Text that will be displayed on the dashboard after this action has been recorded\"],[\"selectedObject\",0,\"Object\",\"\",\"\",\"A HTML object, usually \\\"this\\\". The specified object will blink as long as the popup is open\"]]", "[[\"omega.ShowSliderBox({lable:GetText({text:\\\"volume\\\"}),command:\\\"volume\\\",preset:10,min:1,max:60,step:0.5});\",\"true\"]]"], ["ShowSubmitBox", "function", "omega.ShowSubmitBox(object)", "Shows a pop-up that displays some (custom) text and (custom) buttons.", "Bool", "false if something is missing and true if it worked", "[[\"text\",0,\"String\",\"\\\"Are you sure?\\\" ...with translation\",\"\",\"Text to be displayed on the pop-up\"],[\"callback\",0,\"Function\",\"\",\"\",\"Function that will be executed when the pop-up window is closed. An object will be passed to that function with the parameter \\\"OK\\\":value of the pressed button if a button has been pressed and false otherwise\"],[\"selectedObject\",0,\"Object\",\"\",\"\",\"A HTML object, usually \\\"this\\\". The specified object will blink as long as the popup is open\"],[\"buttons\",0,\"Array\",\"[[omega.GetText('yes'),true],[omega.GetText('no'),false]]\",\"\",\"Array that specifies the buttons (from left to right) to be displayed on the pop-up with the following Syntax:<br>[[\\\"Button 1 lable\\\",returnValueForButton1],[\\\"Button 2 lable\\\",returnValueForButton2],...]\"]]", "[[\"omega.ShowSubmitBox({selectedObject:this});\",\"true\"],[\"omega.ShowSubmitBox({text:\\\"Is this cool?\\\",buttons:[[\\\"yes\\\",1],[\\\"no\\\",0],[\\\"maybe\\\",2]]});\",\"true\"]]"], ["TriggerAction", "function", "omega.TriggerAction(object)", "Creates an event in the backend (similar to <a href=\"#TriggerEvent\">TriggerEvent</a>) but provides additional features for buttons. Use TriggerAction instead of <a href=\"#TriggerEvent\">TriggerEvent</a> on elements that display simple information in addition to triggering something (e.g. A button that can switch a device ON or OFF, but also showes the current state)", "Bool", "false if something is missing and true if it worked", "[[\"command\",1,\"String\",\"\",\"\",\"Last part of the event suffix\"],[\"targetState\",1,\"String\",\"\",\"\",\"Will be added as payload [\\\"targetState\\\"]\"],[\"possibleStates\",1,\"Array\",\"\",\"\",\"List of all values the element could possibly have. E.g. [\\\"[on]\\\",\\\"[off]\\\",\\\"[standby]\\\"]. The oder of the list determines the order, the possible states are displayed when recording a condition from this element\"],[\"statesDict\",0,\"Dict\",\"Created a Dict out of the parameter \\\"possibleStates\\\", with key=value\",\"\",\"Links all possible states of the element with <a href=\\\"#ostates\\\">valid O-MEGA states</a>. E.g. {0:\\\"[off]\\\",1:\\\"[on]\\\"}. Important if some of the \\\"possibleStates\\\" are not <a href=\\\"#ostates\\\">valid O-MEGA states</a>\"],[\"targetValue\",0,\"Array\",\"[]\",\"\",\"If defined, adds an additional payload [\\\"targetValue\\\"] to the event. Elements added to this array would be visible in the O-MEGA web interface (eg. in the macro recorder). Usually used in combination with targetState:\\\"[value]\\\"\"],[\"data\",0,\"String / Integer / Array / Dict\",\"\\\"\\\"\",\"\",\"If defined, adds an additional payload [\\\"data\\\"] to the event. This element is not visible in the O-MEGA web interface\"],[\"variable\",0,\"String\",\"namespace of the device / program this template is assigned to + value of the parameter \\\"command\\\" as name of the variable\",\"\",\"Python variable that stores the value for this element in the backend\"],[\"multi\",0,\"Bool\",\"false\",\"true: A dialouge window is displayed during recording of actions with all possible values;false: Normal\",\"Set this parameter to true if your element toggles or cycles through multiple commands\"],[\"preSelectIndex\",0,\"Integer\",\"The index of \\\"targetState\\\" in \\\"possibleStates\\\" or 0 if there is no match\",\"\",\"During condition recording the item in the list \\\"possibleStates\\\" with this index is pre-selected\"],[\"target\",0,\"String\",\"Assigned Target to the page you called the function from\",\"\",\"Target type + \\\"/\\\" + target id. E.g. \\\"devices/0\\\"\"],[\"lable\",0,\"String\",\"value of the parameter \\\"command\\\"\",\"\",\"Text that will be displayed on the dashboard after this action has been recorded\"],[\"selectedObject\",0,\"Object\",\"\",\"\",\"A HTML object, usually \\\"this\\\". The specified object will blink as long as the popup is open\"]]", "[[\"omega.TriggerAction({lable:GetText({text:\\\"mute\\\"}),command:\\\"mute\\\",targetState:\\\"[on]\\\",possibleStates:omega.ON_OFF,multi:true});\",\"true\"]]"], ["TriggerEnduringEvent", "function", "omega.TriggerEnduringEvent(object)", "Creates an enduring event in the backend. In order for the event to stay enduring, you need to trigger the function <a href=\"#RepeatEnduringEvent\">RepeatEnduringEvent</a> at least every 2 secounds, otherwise the event ends. Use the function <a href=\"#EndLastEvent\">EndLastEvent</a> to end the event.<br>This is an advanced function! The function <a href=\"#ApplyHandlerEnduring\">ApplyHandlerEnduring</a> is typically more convenient.", "Bool", "false if something is missing and true if it worked", "[[\"command\",1,\"String\",\"\",\"\",\"Last part of the event suffix\"],[\"targetState\",0,\"Array / (String)\",\"\\\"\\\"\",\"\",\"Will be added as payload [\\\"targetState\\\"]. If you use a string, the string will be the first and only member of the array\"],[\"data\",0,\"String / Integer / Array / Dict\",\"\\\"\\\"\",\"\",\"If defined, adds an additional payload [\\\"data\\\"] to the event\"],[\"shadow\",0,\"Integer\",\"0\",\"0:Forwards the event to the backend on default and makes the event recordable by the frontend;1:Never forwards the event to the backend but makes the event recordable by the frontend;2:Forwards the event to the backend on default but makes the event not recordable by the frontend\",\"Determines how the event will be processed in the frontend\"],[\"target\",0,\"String\",\"Assigned Target to the page you called the function from\",\"\",\"Target type + \\\"/\\\" + target id. E.g. \\\"devices/0\\\"\"],[\"targetMode\",0,\"String\",\"\\\"\\\"\",\"\",\"If defined, the an additional suffix with the chosen string will be added\"],[\"lable\",0,\"String\",\"value of the parameter command\",\"\",\"Text that will be displayed on the dashboard after this action has been recorded\"]]", "[[\"omega.TriggerEnduringEvent({command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]});\",\"true\"]]"], ["TriggerEvent", "function", "omega.TriggerEvent(object)", "Creates an event in the backend. See also <a href=\"#TriggerEnduringEvent\">TriggerEnduringEvent</a> and <a href=\"#TriggerAction\">TriggerAction</a>", "Bool", "false if something is missing and true if it worked", "[[\"command\",1,\"String\",\"\",\"\",\"Last part of the event suffix\"],[\"targetState\",0,\"String\",\"\\\"\\\"\",\"\",\"Will be added as payload [\\\"targetState\\\"]\"],[\"targetValue\",0,\"Array\",\"[]\",\"\",\"If defined, adds an additional payload [\\\"targetValue\\\"] to the event. Elements added to this array would be visible in the O-MEGA web interface (eg. in the macro recorder). Usually used in combination with targetState:\\\"[value]\\\"\"],[\"data\",0,\"String / Integer / Array / Dict\",\"\\\"\\\"\",\"\",\"If defined, adds an additional payload [\\\"data\\\"] to the event. This element is not visible in the O-MEGA web interface\"],[\"shadow\",0,\"Integer\",\"0\",\"0:Forwards the event to the backend on default and makes the event recordable by the frontend;1:Never forwards the event to the backend but makes the event recordable by the frontend;2:Forwards the event to the backend on default but makes the event not recordable by the frontend\",\"Determines how the event will be processed in the frontend\"],[\"target\",0,\"String\",\"Assigned Target to the page you called the function from\",\"\",\"Target type + \\\"/\\\" + target id. E.g. \\\"devices/0\\\"\"],[\"targetMode\",0,\"String\",\"\\\"\\\"\",\"\",\"If defined, the an additional suffix with the chosen string will be added\"],[\"lable\",0,\"String\",\"value of the parameter command\",\"\",\"Text that will be displayed on the dashboard after this action has been recorded\"]]", "[[\"omega.TriggerEvent({command:\\\"suffix\\\",data:[\\\"hello\\\",\\\"world\\\"]});\",\"true\"]]"], ["Update", "function", "omega.Update(object)", "Forces a data update (triggers the functions that have been registered with the <a href=\"#OnUpdate\">OnUpdate</a> function)", "undefined", "", "[[\"mode\",0,\"String\",\"\\\"data\\\"\",\"\\\"load\\\",\\\"data\\\",\\\"reload\\\"\",\"\"]]", "[[\"omega.Update({})\",\"undefined\"]]"], ["IS_TOUCH_DEVICE", "constant", "omega.IS_TOUCH_DEVICE", "Tells you if the current device has touch capabilities or not", "Bool", "true if the client device has touch capabilities, otherwise false", "", ""], ["ON_OFF", "constant", "omega.ON_OFF", "Can be used together with <a href=\"#TriggerAction\">TriggerAction</a> on the parameter \"possibleStates\"", "Array", "[\"[on]\",\"[off]\"]", "", ""], ["PAGE_TITLE", "constant", "omega.PAGE_TITLE", "Returns the title of the current page in the currently set language", "String", "the title of the current page in the currently set language", "", ""]]